name: Deploy Strapi App

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: deployer

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Admin Panel
        run: npm run build

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DO_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "${{ secrets.DO_HOST }}" >> ~/.ssh/known_hosts

      - name: Upload Project to Server
        run: |
          rsync -avz --delete \
            --exclude="node_modules" \
            --exclude=".cache" \
            --exclude=".env" \
            --exclude=".git" \
            --exclude=".github" \
            --exclude="*.log" \
            -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
            ./ ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:/home/deployer/smart-coded-strapi-fyonka/

      - name: Deploy Application
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} <<'EOF'
            # Source NVM to get Node.js and PM2
            export NVM_DIR="/root/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            # Set the correct PATH to include NVM binaries
            export PATH="/root/.nvm/versions/node/v18.20.8/bin:$PATH"
            
            echo "Environment check:"
            echo "Node: $(node --version)"
            echo "NPM: $(npm --version)"
            echo "PM2: $(pm2 --version)"
            echo "PM2 location: $(which pm2)"
            
            cd /home/deployer/smart-coded-strapi-fyonka
            
            # Install production dependencies
            export NODE_ENV=production
            npm install --production --no-audit --no-fund
            
            # Create ecosystem config
            cat > ecosystem.config.js <<'PMCONFIG'
          module.exports = {
            apps: [{
              name: 'strapi-app',
              script: './node_modules/.bin/strapi',
              args: 'start',
              cwd: '/home/deployer/smart-coded-strapi-fyonka',
              env: {
                NODE_ENV: 'production',
                PORT: 1337,
                HOST: '0.0.0.0'
              },
              instances: 1,
              exec_mode: 'fork',
              watch: false,
              max_memory_restart: '1G',
              error_file: './logs/err.log',
              out_file: './logs/out.log',
              log_file: './logs/combined.log',
              time: true
            }]
          };
          PMCONFIG
            
            # Create logs directory
            mkdir -p logs
            chown -R deployer:deployer /home/deployer/smart-coded-strapi-fyonka || true
            
            # Stop and delete existing app
            pm2 stop strapi-app 2>/dev/null || true
            pm2 delete strapi-app 2>/dev/null || true
            
            # Start the application
            pm2 start ecosystem.config.js
            pm2 save
            pm2 list
            
            echo "✅ Deployment completed successfully!"
          EOF

      - name: Health Check
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} <<'EOF'
            # Source NVM and set PATH
            export NVM_DIR="/root/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            export PATH="/root/.nvm/versions/node/v18.20.8/bin:$PATH"
            
            # Wait for startup
            sleep 15
            
            # Check PM2 status
            echo "PM2 Status:"
            pm2 list
            pm2 show strapi-app
            
            # Check if port 1337 is listening
            if ss -tlnp | grep -q ":1337"; then
              echo "✅ Application is listening on port 1337"
              
              # Test HTTP response
              if curl -f http://localhost:1337/admin &>/dev/null; then
                echo "✅ Application is responding to HTTP requests"
              else
                echo "⚠️ Application is running but admin interface may still be loading"
              fi
            else
              echo "❌ Application not listening on port 1337"
              echo "PM2 logs:"
              pm2 logs strapi-app --lines 30
              exit 1
            fi
          EOF

      - name: Reload Nginx
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} <<'EOF'
            if command -v nginx &> /dev/null; then
              if sudo nginx -t; then
                sudo systemctl reload nginx
                echo "✅ Nginx reloaded successfully"
              else
                echo "❌ Nginx configuration test failed"
              fi
            else
              echo "ℹ️ Nginx not installed, skipping reload"
            fi
          EOF