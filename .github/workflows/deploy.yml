name: Deploy Strapi App

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: deployer

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Admin Panel
        run: npm run build

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DO_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "${{ secrets.DO_HOST }}" >> ~/.ssh/known_hosts

      - name: Upload Project to Server
        run: |
          rsync -avz --delete \
            --exclude="node_modules" \
            --exclude=".cache" \
            --exclude=".env" \
            --exclude=".git" \
            --exclude=".github" \
            --exclude="*.log" \
            -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
            ./ ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:/home/deployer/smart-coded-strapi-fyonka/

      - name: Install Dependencies and Setup PM2
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} <<'EOF'
            cd /home/deployer/smart-coded-strapi-fyonka
            
            # Source NVM
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            echo "Current user: $(whoami)"
            echo "Node.js version: $(node --version)"
            echo "NPM version: $(npm --version)"
            echo "Current PATH: $PATH"
            
            # Install production dependencies
            export NODE_ENV=production
            rm -rf node_modules package-lock.json
            npm install --production --no-audit --no-fund
            
            # Install PM2 globally and verify
            echo "Installing PM2..."
            npm install -g pm2
            
            # Update PATH to include global npm modules
            export PATH="$(npm bin -g):$PATH"
            
            echo "PM2 installation check:"
            which pm2 || echo "PM2 not found in PATH"
            npm list -g pm2 || echo "PM2 not in global packages"
            
            # Create a simple start script as fallback
            cat > start-strapi.sh <<'STARTSCRIPT'
          #!/bin/bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          export NODE_ENV=production
          cd /home/deployer/smart-coded-strapi-fyonka
          node_modules/.bin/strapi start
          STARTSCRIPT
            chmod +x start-strapi.sh
            
            echo "Setup completed"
          EOF

      - name: Start Application with PM2
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} <<'EOF'
            cd /home/deployer/smart-coded-strapi-fyonka
            
            # Source NVM and set PATH
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            export PATH="$(npm bin -g):$PATH"
            
            # Create ecosystem config
            cat > ecosystem.config.js <<'EOLCONFIG'
          module.exports = {
            apps: [{
              name: 'strapi-app',
              script: './node_modules/.bin/strapi',
              args: 'start',
              cwd: '/home/deployer/smart-coded-strapi-fyonka',
              env: {
                NODE_ENV: 'production',
                PORT: 1337,
                HOST: '0.0.0.0'
              },
              instances: 1,
              exec_mode: 'fork',
              watch: false,
              max_memory_restart: '1G',
              min_uptime: '10s',
              max_restarts: 5
            }]
          };
          EOLCONFIG
            
            # Create logs directory
            mkdir -p logs
            chown -R deployer:deployer /home/deployer/smart-coded-strapi-fyonka || true
            
            # Try to use PM2, fallback to direct execution
            if command -v pm2 &> /dev/null; then
              echo "Using PM2 to start application..."
              pm2 kill || true
              pm2 start ecosystem.config.js
              pm2 save
              pm2 list
            else
              echo "PM2 not available, starting with nohup..."
              # Kill any existing process
              pkill -f "strapi start" || true
              sleep 2
              # Start with nohup
              nohup ./start-strapi.sh > logs/strapi.log 2>&1 &
              echo $! > strapi.pid
              sleep 5
              echo "Application started with PID: $(cat strapi.pid)"
            fi
            
            echo "Deployment completed"
          EOF

      - name: Health Check
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} <<'EOF'
            cd /home/deployer/smart-coded-strapi-fyonka
            
            # Wait for application to start
            sleep 15
            
            # Check if application is running
            if ss -tlnp | grep -q ":1337" || netstat -tlnp 2>/dev/null | grep -q ":1337"; then
              echo "✅ Application is listening on port 1337"
              
              # Test the application endpoint
              if curl -f http://localhost:1337/admin > /dev/null 2>&1; then
                echo "✅ Application is responding to requests"
              else
                echo "⚠️ Application is running but may still be starting up"
              fi
            else
              echo "❌ Application is not listening on port 1337"
              echo "Checking logs..."
              if [ -f logs/strapi.log ]; then
                tail -30 logs/strapi.log
              fi
              if [ -f strapi.pid ]; then
                echo "Process ID: $(cat strapi.pid)"
                ps aux | grep $(cat strapi.pid) || echo "Process not running"
              fi
              exit 1
            fi
          EOF

      - name: Reload Nginx
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} <<'EOF'
            if command -v nginx &> /dev/null; then
              if sudo nginx -t; then
                sudo systemctl reload nginx
                echo "✅ Nginx reloaded successfully"
              else
                echo "❌ Nginx configuration test failed"
              fi
            else
              echo "ℹ️ Nginx not installed, skipping reload"
            fi
          EOF