name: Deploy Strapi App

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: deployer

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Admin Panel
        run: npm run build

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DO_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "${{ secrets.DO_HOST }}" >> ~/.ssh/known_hosts

      - name: Upload Project to Server
        run: |
          rsync -avz --delete \
            --exclude="node_modules" \
            --exclude=".cache" \
            --exclude=".env" \
            --exclude=".git" \
            --exclude=".github" \
            --exclude="*.log" \
            -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
            ./ ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:/home/deployer/smart-coded-strapi-fyonka/

      - name: Deploy Application
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} <<'EOF'
            cd /home/deployer/smart-coded-strapi-fyonka
            
            # Fix permissions every time (workaround for the permission issue)
            chmod -R +x /root/.nvm/versions/node/v18.20.8/bin/ 2>/dev/null || true
            chmod +x /root/.nvm/versions/node/v18.20.8/lib/node_modules/pm2/bin/pm2 2>/dev/null || true
            
            # Use variables for paths
            NODE_BIN="/root/.nvm/versions/node/v18.20.8/bin/node"
            NPM_BIN="/root/.nvm/versions/node/v18.20.8/bin/npm"
            
            echo "Environment check:"
            echo "Node: $($NODE_BIN --version 2>/dev/null || echo 'Node failed')"
            echo "NPM: $($NPM_BIN --version 2>/dev/null || echo 'NPM failed')"
            
            # Install production dependencies
            export NODE_ENV=production
            $NPM_BIN install --production --no-audit --no-fund
            
            # Create a simple startup script
            cat > start-strapi.sh <<'STARTSCRIPT'
          #!/bin/bash
          cd /home/deployer/smart-coded-strapi-fyonka
          export NODE_ENV=production
          export PORT=1337
          export HOST=0.0.0.0
          
          # Kill any existing Strapi processes
          pkill -f "strapi start" || true
          pkill -f "node.*strapi" || true
          
          # Start Strapi in background
          nohup /root/.nvm/versions/node/v18.20.8/bin/node node_modules/.bin/strapi start > logs/strapi.log 2>&1 &
          echo $! > strapi.pid
          
          echo "Strapi started with PID: $(cat strapi.pid)"
          STARTSCRIPT
            
            chmod +x start-strapi.sh
            mkdir -p logs
            chown -R deployer:deployer /home/deployer/smart-coded-strapi-fyonka || true
            
            # Try PM2 first, fallback to direct execution
            if /root/.nvm/versions/node/v18.20.8/bin/pm2 --version &>/dev/null; then
              echo "Using PM2..."
              
              # Create ecosystem config
              cat > ecosystem.config.js <<'PMCONFIG'
          module.exports = {
            apps: [{
              name: 'strapi-app',
              script: './node_modules/.bin/strapi',
              args: 'start',
              cwd: '/home/deployer/smart-coded-strapi-fyonka',
              env: {
                NODE_ENV: 'production',
                PORT: 1337,
                HOST: '0.0.0.0'
              },
              instances: 1,
              exec_mode: 'fork',
              watch: false,
              max_memory_restart: '1G',
              error_file: './logs/err.log',
              out_file: './logs/out.log',
              log_file: './logs/combined.log',
              time: true
            }]
          };
          PMCONFIG
              
              /root/.nvm/versions/node/v18.20.8/bin/pm2 stop strapi-app 2>/dev/null || true
              /root/.nvm/versions/node/v18.20.8/bin/pm2 delete strapi-app 2>/dev/null || true
              /root/.nvm/versions/node/v18.20.8/bin/pm2 start ecosystem.config.js
              /root/.nvm/versions/node/v18.20.8/bin/pm2 save
              /root/.nvm/versions/node/v18.20.8/bin/pm2 list
            else
              echo "PM2 failed, using direct startup script..."
              ./start-strapi.sh
              sleep 3
              if [ -f strapi.pid ]; then
                echo "Strapi PID: $(cat strapi.pid)"
                ps aux | grep $(cat strapi.pid) | grep -v grep || echo "Process not found"
              fi
            fi
            
            echo "✅ Deployment completed!"
          EOF

      - name: Health Check
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} <<'EOF'
            cd /home/deployer/smart-coded-strapi-fyonka
            
            # Wait for startup
            sleep 20
            
            # Check if using PM2 or direct process
            if /root/.nvm/versions/node/v18.20.8/bin/pm2 list &>/dev/null; then
              echo "PM2 Status:"
              /root/.nvm/versions/node/v18.20.8/bin/pm2 list
            elif [ -f strapi.pid ]; then
              echo "Direct process PID: $(cat strapi.pid)"
              ps aux | grep $(cat strapi.pid) | grep -v grep || echo "Process not found"
            fi
            
            # Check if port 1337 is listening
            if ss -tlnp | grep -q ":1337"; then
              echo "✅ Application is listening on port 1337"
              
              # Test HTTP response
              if curl -f http://localhost:1337/admin &>/dev/null; then
                echo "✅ Application is responding to HTTP requests"
              else
                echo "⚠️ Application is running but admin interface may still be loading"
              fi
            else
              echo "❌ Application not listening on port 1337"
              echo "Checking logs..."
              if [ -f logs/strapi.log ]; then
                echo "=== Strapi logs ==="
                tail -30 logs/strapi.log
              fi
              if /root/.nvm/versions/node/v18.20.8/bin/pm2 logs &>/dev/null; then
                echo "=== PM2 logs ==="
                /root/.nvm/versions/node/v18.20.8/bin/pm2 logs strapi-app --lines 30
              fi
              exit 1
            fi
          EOF